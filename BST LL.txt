#include <stdio.h>
#include <stdlib.h>

struct node {
  int key;
  struct node *left, *right;
};

struct node *newNode(int item) {
  struct node *temp = (struct node *)malloc(sizeof(struct node));
  temp->key = item;
  temp->left = temp->right = NULL;
  return temp;
}

void inorder(struct node *root) {
  if (root != NULL) {
    // Traverse left
    inorder(root->left);

    // Traverse root
    printf("%d -> ", root->key);

    // Traverse right
    inorder(root->right);
  }
}

void preorder(struct node *root) {
  if (root != NULL) {
    
    // Traverse root
    printf("%d -> ", root->key);  
      
    // Traverse left
    preorder(root->left);

    // Traverse right
    preorder(root->right);
    
  }
}

void postorder(struct node *root) {
  if (root != NULL) {
      
    // Traverse left
    postorder(root->left);

    // Traverse right
    postorder(root->right);
    
    // Traverse root
    printf("%d -> ", root->key);  
  }
}

struct node *insert(struct node *node, int key) {
  if (node == NULL) return newNode(key);

  if (key < node->key)
    node->left = insert(node->left, key);
  else
    node->right = insert(node->right, key);

  return node;
}